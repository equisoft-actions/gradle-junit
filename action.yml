name: Run a gradle/junit task and upload test reports
description: |
  Run a gradle task expecting JUnit reports to be produced. The exported reports will follow naming conventions detailed
  by our ADRs (https://confluence.equisoft.com/display/HRMI/ADR).

  This actions will also annotate the PR or commit with the failed tests.

inputs:
  gradle-properties:
    description: Content of a gradle.properties file that will be passed to the gradle runner.
    required: false
  gradle-project-path:
    description: |
      Gradle project path. For example: bff.
      Defaults to the root project.
    required: true
    default: "."
  read-only-cache:
    description: If set to true, the action will only read from the cache and will not write to it.
    required: true
    default: "true"
  report-retention-days:
    description: Duration in days to preserve reports.
    required: true
    default: "5"
  task-name:
    description: |
      The JUnit task name. The action expects a Gradle task named "ci-<task-name>".
      This task name will be used to read multiple outputs under the build directory:

      - <project>/build/jacoco/<task-name>.exec
      - <project>/build/reports/tests/<task-name>/
      - <project>/build/test-results/<task-name>/

      Defaults to "test".
    required: true
    default: test
  working-directory:
    description: Relative path under $GITHUB_WORKSPACE where the root project is located.
    required: false
    default: "."

runs:
  using: composite
  steps:
    - name: metadata
      id: metadata
      shell: bash
      run: |
        WORKING_DIRECTORY=${{ inputs.working-directory }}
        GRADLE_PROJECT_PATH=${{  inputs.gradle-project-path }}
        if [[ "$GRADLE_PROJECT_PATH" == "." ]]; then
          ARTIFACT_PATH="$WORKING_DIRECTORY/**"
        else
          ARTIFACT_PATH="$WORKING_DIRECTORY/$GRADLE_PROJECT_PATH"
        fi
        echo "artifact-path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT

    - name: Process gradle properties
      id: gradle-properties
      shell: python
      env:
        GRADLE_PROPERTIES: ${{ inputs.gradle-properties }}
      run: |
        import os

        properties_list: list[str] = [line for line in (line.strip() for line in os.environ.get('GRADLE_PROPERTIES').splitlines()) if line]
        properties = list(map(lambda x: f'-P{x}' if not x.startswith('-P') else x, properties_list))

        with open(os.environ.get('GITHUB_OUTPUT'), 'a') as output_file:
          output_file.write('gradle-properties=')
          output_file.write(' '.join(properties))
          output_file.write('\n')

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-version: wrapper
        cache-read-only: ${{ inputs.read-only-cache }}

    - name: Run tests
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ./gradlew -p ${{ inputs.gradle-project-path }} ci-${{ inputs.task-name }} ${{ steps.gradle-properties.outputs.gradle-properties }}

    - name: Upload report
      uses: actions/upload-artifact@v4
      if: "!cancelled()"
      with:
        name: ${{ inputs.task-name }}-report
        retention-days: ${{ inputs.report-retention-days }}
        path: |
          ${{ steps.metadata.outputs.artifact-path }}/build/reports/tests/${{ inputs.task-name }}/

    - name: Upload results
      uses: actions/upload-artifact@v4
      if: "!cancelled()"
      with:
        name: ${{ inputs.task-name }}-results
        retention-days: 1
        if-no-files-found: error
        path: |
          ${{ steps.metadata.outputs.artifact-path }}/build/test-results/${{ inputs.task-name }}/
          !${{ steps.metadata.outputs.artifact-path }}/build/test-results/${{ inputs.task-name }}/binary

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      if: "!cancelled()"
      with:
        name: ${{ inputs.task-name }}-jacoco-build
        retention-days: 1
        if-no-files-found: error
        path: |
          ${{ steps.metadata.outputs.artifact-path }}/build/jacoco/${{ inputs.task-name }}.exec

    - name: Create annotations
      uses: mikepenz/action-junit-report@v5
      if: "!cancelled() && github.actor != 'dependabot[bot]'"
      with:
        check_name: ${{ inputs.task-name }} report
        report_paths: |
          ${{ steps.metadata.outputs.artifact-path }}/build/test-results/${{ inputs.task-name }}/TEST-*.xml
